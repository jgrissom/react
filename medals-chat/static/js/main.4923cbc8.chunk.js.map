{"version":3,"sources":["components/SignalR.jsx","reportWebVitals.js","index.js"],"names":["SignalR","useState","connection","setConnection","messages","setMessages","message","setMessage","name","setName","latestMessages","useRef","current","useEffect","newConnection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","start","then","console","log","on","m","parsedJson","JSON","parse","mutableMessages","push","catch","e","handleSubmit","a","preventDefault","send","stringify","onSubmit","map","style","fontWeight","Date","now","Math","random","type","id","placeholder","value","autoComplete","autoCapitalize","onChange","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAmFeA,EAhFC,WACd,MAAsCC,mBAAS,MAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KACA,EAAkCF,mBAAS,IAA3C,mBAAQG,EAAR,KAAkBC,EAAlB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAQK,EAAR,KAAiBC,EAAjB,KACA,EAA0BN,mBAAS,IAAnC,mBAAQO,EAAR,KAAcC,EAAd,KACMC,EAAiBC,iBAAO,MAE9BD,EAAeE,QAAUR,EAGzBS,qBAAU,WACR,IAAMC,GAAgB,IAAIC,KACvBC,QAAQ,iDACRC,yBACAC,QAEHf,EAAcW,KACb,IAGHD,qBAAU,WACJX,GACFA,EAAWiB,QACRC,MAAK,WACJC,QAAQC,IAAI,cAEZpB,EAAWqB,GAAG,kBAAkB,SAAAC,GAC9B,IAAMC,EAAaC,KAAKC,MAAMH,GACxBI,EAAe,YAAOlB,EAAeE,SAC3CgB,EAAgBC,KAAKJ,GACrBpB,EAAYuB,SAGfE,OAAM,SAAAC,GAAC,OAAIV,QAAQC,IAAI,sBAAuBS,QAElD,CAAC7B,IAEJ,IAAM8B,EAAY,uCAAG,WAAOD,GAAP,eAAAE,EAAA,6DACnBF,EAAEG,iBACIV,EAAI,CAAChB,KAAMA,EAAMF,QAASA,GAChCe,QAAQC,IAAIE,GAHO,SAIbtB,EAAWiC,KAAK,cAAeT,KAAKU,UAAUZ,IAJjC,2CAAH,sDAMlB,OACE,uBAAMa,SAAUL,EAAhB,UACE,8BACI5B,EAASkC,KAAI,SAACd,GAAD,OACb,gCACE,sBAAMe,MAAO,CAACC,WAAY,QAA1B,SAAoChB,EAAEhB,OADxC,IAEGgB,EAAElB,UAFKmC,KAAKC,MAAQC,KAAKC,eAMhC,gCACA,uBACIC,KAAK,OACLC,GAAG,OACHtC,KAAK,OACLuC,YAAY,OACZC,MAAOxC,EACPyC,aAAa,MACbC,eAAe,MACfC,SAAW,SAACpB,GAAD,OAAOtB,EAAQsB,EAAEqB,OAAOJ,UAC7B,uBACR,uBACEH,KAAK,OACLC,GAAG,UACHtC,KAAK,UACLuC,YAAY,UACZC,MAAO1C,EACP2C,aAAa,MACbC,eAAe,MACfC,SAAW,SAACpB,GAAD,OAAOxB,EAAWwB,EAAEqB,OAAOJ,UAChC,uBACR,wBAAQH,KAAK,SAAb,iCCjEOQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4923cbc8.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { HubConnectionBuilder } from '@microsoft/signalr';\r\n\r\nconst SignalR = () => {\r\n  const [ connection, setConnection ] = useState(null);\r\n  const [ messages, setMessages ] = useState([]);\r\n  const [ message, setMessage ] = useState('');\r\n  const [ name, setName ] = useState('');\r\n  const latestMessages = useRef(null);\r\n\r\n  latestMessages.current = messages;\r\n\r\n  // componentDid Mount\r\n  useEffect(() => {\r\n    const newConnection = new HubConnectionBuilder()\r\n      .withUrl('https://medalsapi.azurewebsites.net/medalsHub')\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n    setConnection(newConnection);\r\n  }, []);\r\n\r\n  // componentDidUpdate (changes to connection)\r\n  useEffect(() => {\r\n    if (connection) {\r\n      connection.start()\r\n        .then(() => {\r\n          console.log('Connected!');\r\n          \r\n          connection.on('ReceiveMessage', m => {\r\n            const parsedJson = JSON.parse(m);\r\n            const mutableMessages = [...latestMessages.current];\r\n            mutableMessages.push(parsedJson);\r\n            setMessages(mutableMessages);\r\n          });\r\n        })\r\n        .catch(e => console.log('Connection failed: ', e));\r\n    }\r\n  }, [connection]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const m = {name: name, message: message};\r\n    console.log(m);\r\n    await connection.send('SendMessage', JSON.stringify(m));\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        { messages.map((m) => \r\n          <div key={Date.now() * Math.random()}>\r\n            <span style={{fontWeight: 'bold'}}>{m.name}</span>:\r\n            {m.message}\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div>\r\n      <input \r\n          type=\"text\" \r\n          id=\"name\" \r\n          name=\"name\" \r\n          placeholder=\"name\"\r\n          value={name}\r\n          autoComplete=\"off\"\r\n          autoCapitalize=\"off\"\r\n          onChange={ (e) => setName(e.target.value) }>\r\n        </input><br />\r\n        <input \r\n          type=\"text\" \r\n          id=\"message\" \r\n          name=\"message\" \r\n          placeholder=\"message\"\r\n          value={message}\r\n          autoComplete=\"off\"\r\n          autoCapitalize=\"off\"\r\n          onChange={ (e) => setMessage(e.target.value) }>\r\n        </input><br />\r\n        <button type=\"submit\">Send Message</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SignalR;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\nimport SignalR from './components/SignalR';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <SignalR />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}