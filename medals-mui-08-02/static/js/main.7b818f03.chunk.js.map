{"version":3,"sources":["components/Medal.jsx","components/Country.jsx","components/NewCountry.jsx","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","countryMedal","marginTop","display","alignItems","medalAvatar","color","medalName","fontSize","paddingLeft","width","textTransform","iconButton","padding","delta","fontStyle","opacity","Medal","props","classes","medal","country","onIncrement","onDecrement","className","Avatar","style","backgroundColor","RGBColor","name","page_value","saved_value","IconButton","onClick","id","disabled","marginLeft","marginRight","divider","marginBottom","countryName","paddingRight","Country","medals","onDelete","onSave","onReset","Paper","elevation","Grid","container","spacing","item","xs","Badge","badgeContent","sum","forEach","getMedalsTotal","textAlign","unsaved","renderSaveButton","Fragment","Divider","map","fab","position","bottom","right","NewCountry","useState","open","setOpen","setName","onAdd","handleClose","Fab","size","Dialog","onClose","onSubmit","e","preventDefault","handleSubmit","DialogTitle","DialogContent","DialogContentText","TextField","onChange","target","value","autoFocus","margin","label","type","fullWidth","autoComplete","autoCapitalize","DialogActions","Button","trim","length","appHeading","paddingTop","paddingBottom","zIndex","appHeadingBadge","fontFamily","appHeadingText","App","apiEndpoint","countries","setCountries","connection","setConnection","useRef","latestCountries","current","useEffect","a","axios","get","fetchedCountries","data","newCountries","newCountry","count","push","fetchCountries","newConnection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","start","then","console","log","on","mutableCountries","concat","filter","c","updatedCountry","idx","findIndex","catch","handleAdd","post","handleDelete","countryId","originalCountries","delete","response","status","alert","handleSave","jsonPatch","op","path","JSON","stringify","patch","handleReset","handleIncrement","handleUpdate","handleDecrement","factor","reduce","b","getAllMedalsTotal","Container","fixed","justifyContent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b818f03.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport AddBoxOutlinedIcon from '@material-ui/icons/AddBoxOutlined';\r\nimport IndeterminateCheckBoxOutlinedIcon from '@material-ui/icons/IndeterminateCheckBoxOutlined';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  countryMedal: {\r\n    marginTop: '10px',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  medalAvatar: {\r\n    color: 'black',\r\n  },\r\n  medalName: {\r\n    fontSize: '1.4em',\r\n    paddingLeft: '10px',\r\n    width: '130px',\r\n    textTransform: 'capitalize',\r\n  },\r\n  iconButton: {\r\n    padding: '2px',\r\n  },\r\n  delta: {\r\n    fontStyle: 'italic',\r\n    opacity: '.7',\r\n  },\r\n});\r\n\r\nconst Medal = (props) => {\r\n  const classes = useStyles();\r\n  const { medal, country, onIncrement, onDecrement } = props;\r\n  return (\r\n    <div className={classes.countryMedal}>\r\n      <Avatar style={{ backgroundColor: medal.RGBColor }} className={classes.medalAvatar}>\r\n        {country[medal.name].page_value}\r\n      </Avatar>\r\n      { ( country[medal.name].page_value !== country[medal.name].saved_value) ?\r\n        <span className={`${classes.medalName} ${classes.delta}`}>\r\n          {medal.name} Medals\r\n        </span>\r\n      :\r\n        <span className={classes.medalName}>\r\n          {medal.name} Medals\r\n        </span>\r\n      }\r\n      <IconButton\r\n        onClick={ () => onIncrement(country.id, medal.name) } \r\n        className={classes.iconButton} \r\n        color='primary' \r\n        aria-label='increment gold'>\r\n        <AddBoxOutlinedIcon fontSize='large' />\r\n      </IconButton>\r\n      <IconButton\r\n        disabled={country[medal.name].page_value === 0}\r\n        onClick={ () => onDecrement(country.id, medal.name) }\r\n        className={classes.iconButton}\r\n        color='secondary' \r\n        aria-label='decrement gold'>\r\n        <IndeterminateCheckBoxOutlinedIcon fontSize='large' />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Medal;\r\n","import React from 'react';\r\nimport Medal from './Medal';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Divider } from '@material-ui/core';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  country: {\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n    marginTop: 10,\r\n    padding: 18,\r\n    width: 260,\r\n  },\r\n  divider: {\r\n    marginTop: 5,\r\n    marginBottom: 10,\r\n  },\r\n  countryName: {\r\n    fontSize: '1.8em',\r\n    paddingRight: '8px',\r\n  },\r\n});\r\n\r\nconst Country =(props) => {\r\n  const { country, medals, onIncrement, onDecrement, onDelete, onSave, onReset } = props;\r\n  const classes = useStyles();\r\n\r\n  const getMedalsTotal = (country, medals) => {\r\n    let sum = 0;\r\n    medals.forEach(medal => { sum += country[medal.name].page_value; });\r\n    return sum;\r\n  }\r\n  const renderSaveButton = () => {\r\n    let unsaved = false;\r\n    medals.forEach(medal => {\r\n      if (country[medal.name].page_value !== country[medal.name].saved_value) {\r\n        unsaved = true;\r\n      }\r\n    });\r\n    return unsaved;\r\n  }\r\n  return (\r\n    <Paper elevation={4} className={classes.country}>\r\n      <Grid container spacing={0}>\r\n        <Grid item xs={8}>\r\n          <Badge badgeContent={ getMedalsTotal(country, medals) } color='primary'>\r\n            <div className={classes.countryName}>\r\n              { country.name }\r\n            </div>\r\n          </Badge>\r\n        </Grid>\r\n        <Grid style={{textAlign: 'right'}} item xs={4}>\r\n          { renderSaveButton() ?\r\n            <React.Fragment>\r\n              <IconButton aria-label=\"save\" onClick={ () => onSave(country.id) } style={{ padding: 6 }}>\r\n                <SaveIcon fontSize=\"medium\" color=\"primary\" />\r\n              </IconButton>\r\n              <IconButton aria-label=\"undo\" onClick={ () => onReset(country.id) } style={{ padding: 6 }}>\r\n                <UndoIcon fontSize=\"medium\" color=\"secondary\" />\r\n              </IconButton>\r\n            </React.Fragment>\r\n          :\r\n            <IconButton aria-label=\"delete\" onClick={() => onDelete(country.id)} style={{ padding: 6 }}>\r\n              <DeleteIcon fontSize=\"medium\" />\r\n            </IconButton>\r\n          }\r\n        </Grid>\r\n      </Grid>\r\n      <Divider className={classes.divider} />\r\n      { medals.map(medal =>\r\n        <Medal \r\n          key={ medal.id } \r\n          country={ country } \r\n          medal={ medal } \r\n          onIncrement={ onIncrement } \r\n          onDecrement={ onDecrement } />\r\n      ) }\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default Country;\r\n","import React, { useState } from 'react';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  fab: {\r\n    position: 'fixed',\r\n    bottom: '1em',\r\n    right: '1em'\r\n  }\r\n});\r\n\r\nconst NewCountry = (props) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [name, setName] = useState('');\r\n  const { onAdd } = props;\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n    setName('');\r\n  }\r\n  const handleClose = () => setOpen(false);\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onAdd(name);\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Fab \r\n        onClick={ handleOpen }\r\n        className={ classes.fab } \r\n        size=\"medium\" \r\n        color=\"primary\" \r\n        aria-label=\"add\">\r\n        <AddIcon />\r\n      </Fab>\r\n      <Dialog open={ open } onClose={ handleClose } aria-labelledby=\"form-dialog-title\">\r\n      <form onSubmit={ (e) => handleSubmit(e) }>\r\n        <DialogTitle id=\"form-dialog-title\">Add Country</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To add a new country, enter the name\r\n          </DialogContentText>\r\n          <TextField\r\n            onChange={ (e) => setName(e.target.value) }\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n            value={ name }\r\n            label=\"Country Name\"\r\n            type=\"text\"\r\n            fullWidth\r\n            autoComplete=\"off\"\r\n            autoCapitalize=\"off\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={ handleClose } color=\"secondary\">\r\n            Cancel\r\n          </Button>\r\n          <Button disabled={ name.trim().length === 0 } type=\"submit\" color=\"primary\">\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </form>\r\n    </Dialog>\r\n  </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default NewCountry;\r\n","// Repository:  medals-a-react\r\n// Author:      Jeff Grissom\r\n// Version:     08.xx-02\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { HubConnectionBuilder } from '@microsoft/signalr';\r\nimport Country from './components/Country';\r\nimport NewCountry from './components/NewCountry';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Grid } from '@material-ui/core';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport './App.css';\r\n\r\nconst useStyles = makeStyles({\r\n  appHeading: {\r\n    textAlign: 'center',\r\n    margin: 0,\r\n    backgroundColor: '#BBBBF1',\r\n    position: 'fixed',\r\n    width: '100%',\r\n    paddingTop: '15px',\r\n    paddingBottom: '4px',\r\n    zIndex: '1000',\r\n    opacity: '.95',\r\n  },\r\n  appHeadingBadge: {\r\n    fontSize: '2.0em',\r\n    fontFamily: 'Teko, sans-serif',\r\n  },\r\n  appHeadingText: {\r\n    paddingRight: '8px'\r\n  },\r\n});\r\n\r\nconst App = () => {\r\n  // const apiEndpoint = \"https://localhost:5001/api/country\";\r\n  // const hubEndpoint = \"https://localhost:5001/medalsHub\"\r\n  const apiEndpoint = \"https://medalsapi.azurewebsites.net/api/country\";\r\n  const hubEndpoint = \"https://medalsapi.azurewebsites.net/medalsHub\"\r\n  const [ countries, setCountries ] = useState([]);\r\n  const [ connection, setConnection] = useState(null);\r\n  const medals = useRef([\r\n    { id: 1, name: 'gold', RGBColor: '#ffc107' },\r\n    { id: 2, name: 'silver', RGBColor: '#c4cacc' },\r\n    { id: 3, name: 'bronze', RGBColor: '#cd7f32' },\r\n  ]);\r\n  const latestCountries = useRef(null);\r\n  // latestCountries.current is a ref variable to countries\r\n  // this is needed to access state variable in useEffect w/o dependency\r\n  latestCountries.current = countries;\r\n  const classes = useStyles();\r\n\r\n  // this is the functional equivalent to componentDidMount\r\n  useEffect(() => {\r\n    // initial data loaded here\r\n    async function fetchCountries() {\r\n      const { data : fetchedCountries } = await axios.get(apiEndpoint);\r\n      let newCountries = [];\r\n      fetchedCountries.forEach(country => {\r\n        let newCountry = {\r\n          id: country.id,\r\n          name: country.name,\r\n        };\r\n        medals.current.forEach(medal => {\r\n          const count = country[medal.name];\r\n          newCountry[medal.name] = { page_value: count, saved_value: count };\r\n        });\r\n        newCountries.push(newCountry);\r\n      });\r\n      setCountries(newCountries);\r\n    }\r\n    fetchCountries();\r\n\r\n    // signalR\r\n    const newConnection = new HubConnectionBuilder()\r\n      .withUrl(hubEndpoint)\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n    setConnection(newConnection);\r\n  }, []);\r\n  // componentDidUpdate (changes to connection)\r\n  useEffect(() => {\r\n    if (connection) {\r\n      connection.start()\r\n      .then(() => {\r\n        console.log('Connected!');\r\n\r\n        connection.on('ReceiveAddMessage', country => {\r\n          console.log(`Add: ${country.name}`);\r\n\r\n          let newCountry = { \r\n            id: country.id, \r\n            name: country.name,\r\n          };\r\n          medals.current.forEach(medal => {\r\n            const count = country[medal.name];\r\n            newCountry[medal.name] = { page_value: count, saved_value: count };\r\n          });\r\n          let mutableCountries = [...latestCountries.current];\r\n          mutableCountries = mutableCountries.concat(newCountry);\r\n          setCountries(mutableCountries);\r\n        });\r\n\r\n        connection.on('ReceiveDeleteMessage', id => {\r\n          console.log(`Delete id: ${id}`);\r\n          let mutableCountries = [...latestCountries.current];\r\n          mutableCountries = mutableCountries.filter(c => c.id !== id);\r\n          setCountries(mutableCountries);\r\n        });\r\n\r\n        connection.on('ReceivePatchMessage', country => {\r\n          console.log(`Patch: ${country.name}`);\r\n          let updatedCountry = {\r\n            id: country.id,\r\n            name: country.name,\r\n          }\r\n          medals.current.forEach(medal => {\r\n            const count = country[medal.name];\r\n            updatedCountry[medal.name] = { page_value: count, saved_value: count };\r\n          });\r\n          let mutableCountries = [...latestCountries.current];\r\n          const idx = mutableCountries.findIndex(c => c.id === country.id);\r\n          mutableCountries[idx] = updatedCountry;\r\n\r\n          setCountries(mutableCountries);\r\n        });\r\n      })\r\n      .catch(e => console.log('Connection failed: ', e));\r\n    }\r\n  // useEffect is dependent on changes connection\r\n  }, [connection]);\r\n\r\n  const handleAdd = async (name) => {\r\n    await axios.post(apiEndpoint, { name: name });\r\n  }\r\n  const handleDelete = async (countryId) => {\r\n    const originalCountries = countries;\r\n    setCountries(countries.filter(c => c.id !== countryId));\r\n    try {\r\n      await axios.delete(`${apiEndpoint}/${countryId}`);\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 404) {\r\n        // country already deleted\r\n        console.log(\"The record does not exist - it may have already been deleted\");\r\n      } else { \r\n        alert('An error occurred while deleting');\r\n        setCountries(originalCountries);\r\n      }\r\n    }\r\n  }\r\n  const handleSave = async (countryId) => {\r\n    const originalCountries = countries;\r\n\r\n    const idx = countries.findIndex(c => c.id === countryId);\r\n    const mutableCountries = [ ...countries ];\r\n    const country = mutableCountries[idx];\r\n    let jsonPatch = [];\r\n    medals.current.forEach(medal => {\r\n      if (country[medal.name].page_value !== country[medal.name].saved_value) {\r\n        jsonPatch.push({ op: \"replace\", path: medal.name, value: country[medal.name].page_value });\r\n        country[medal.name].saved_value = country[medal.name].page_value;\r\n      }\r\n    });\r\n    console.log(`json patch for id: ${countryId}: ${JSON.stringify(jsonPatch)}`);\r\n    // update state\r\n    setCountries(mutableCountries);\r\n\r\n    try {\r\n      await axios.patch(`${apiEndpoint}/${countryId}`, jsonPatch);\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 404) {\r\n        // country already deleted\r\n        console.log(\"The record does not exist - it may have already been deleted\");\r\n      } else { \r\n        alert('An error occurred while updating');\r\n        setCountries(originalCountries);\r\n      }\r\n    }\r\n  }\r\n  const handleReset = (countryId) => {\r\n    const idx = countries.findIndex(c => c.id === countryId);\r\n    const mutableCountries = [ ...countries ];\r\n    const country = mutableCountries[idx];\r\n    medals.current.forEach(medal => {\r\n      country[medal.name].page_value = country[medal.name].saved_value;\r\n    });\r\n    setCountries(mutableCountries);\r\n  }\r\n  const handleIncrement = (countryId, medalName) => handleUpdate(countryId, medalName, 1);\r\n  const handleDecrement = (countryId, medalName) => handleUpdate(countryId, medalName, -1);\r\n  const handleUpdate = (countryId, medalName, factor) => {\r\n    const idx = countries.findIndex(c => c.id === countryId);\r\n    const mutableCountries = [...countries ];\r\n    mutableCountries[idx][medalName].page_value += (1 * factor);\r\n    setCountries(mutableCountries);\r\n  }\r\n  const getAllMedalsTotal = () => {\r\n    let sum = 0;\r\n    medals.current.forEach(medal => { sum += countries.reduce((a, b) => a + b[medal.name].page_value, 0); });\r\n    return sum;\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <div className={classes.appHeading}>\r\n        <Badge \r\n          className={classes.appHeadingBadge}\r\n          badgeContent={ getAllMedalsTotal() } \r\n          color='primary'>\r\n          <div className={classes.appHeadingText}>Olympic Medals</div>\r\n        </Badge>\r\n      </div>\r\n      <Container fixed={true} style={{paddingTop: '70px', paddingBottom: '20px'}}>\r\n        <NewCountry onAdd={ handleAdd } />\r\n        <Grid spacing={2} justifyContent='center' container>\r\n          { countries.map(country => \r\n            <Grid item key={ country.id }>\r\n              <Country \r\n                country={ country } \r\n                medals={ medals.current }\r\n                onDelete={ handleDelete }\r\n                onSave={ handleSave }\r\n                onReset={ handleReset }\r\n                onIncrement={ handleIncrement } \r\n                onDecrement={ handleDecrement } />\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n \r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}