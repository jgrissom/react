{"version":3,"sources":["components/Chat.jsx","App.js","reportWebVitals.js","index.js"],"names":["Chat","useState","connection","setConnection","name","setName","message","setMessage","chat","setChat","latestChat","useRef","current","useEffect","newConnection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","start","then","console","log","on","m","updatedChat","push","catch","e","handleSubmit","a","preventDefault","send","Fragment","onSubmit","type","id","placeholder","value","autoComplete","autoCapitalize","onChange","target","map","c","style","fontWeight","Date","now","Math","random","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAsFeA,EAnFF,WAEX,IACA,EAAqCC,mBAAS,MAA9C,mBAAQC,EAAR,KAAoBC,EAApB,KACA,EAA0BF,mBAAS,IAAnC,mBAAQG,EAAR,KAAcC,EAAd,KACA,EAAgCJ,mBAAS,IAAzC,mBAAQK,EAAR,KAAiBC,EAAjB,KACA,EAA0BN,mBAAS,IAAnC,mBAAQO,EAAR,KAAcC,EAAd,KACMC,EAAaC,iBAAO,MAE1BD,EAAWE,QAAUJ,EAGrBK,qBAAU,WACR,IAAMC,GAAgB,IAAIC,KACvBC,QAZmB,gDAanBC,yBACAC,QAEHf,EAAcW,KACb,IAEHD,qBAAU,WACJX,GACFA,EAAWiB,QACRC,MAAK,WACJC,QAAQC,IAAI,cAEZpB,EAAWqB,GAAG,kBAAkB,SAAAC,GAC9B,IAAMC,EAAW,YAAOf,EAAWE,SACnCa,EAAYC,KAAKF,GACjBf,EAAQgB,SAGXE,OAAM,SAAAC,GAAC,OAAIP,QAAQC,IAAI,sBAAuBM,QAElD,CAAC1B,IACJ,IAAM2B,EAAY,uCAAG,WAAOD,GAAP,eAAAE,EAAA,6DACnBF,EAAEG,iBACIP,EAAI,CAACpB,KAAMA,EAAME,QAASA,GAChCe,QAAQC,IAAIE,GAHO,SAIbtB,EAAW8B,KAAK,cAAeR,GAJlB,2CAAH,sDAOlB,OACE,eAAC,IAAMS,SAAP,WACE,sBAAMC,SAAUL,EAAhB,SACE,gCACA,uBACIM,KAAK,OACLC,GAAG,OACHhC,KAAK,OACLiC,YAAY,OACZC,MAAOlC,EACPmC,aAAa,MACbC,eAAe,MACfC,SAAW,SAACb,GAAD,OAAOvB,EAAQuB,EAAEc,OAAOJ,UAC7B,uBACR,uBACEH,KAAK,OACLC,GAAG,UACHhC,KAAK,UACLiC,YAAY,UACZC,MAAOhC,EACPiC,aAAa,MACbC,eAAe,MACfC,SAAW,SAACb,GAAD,OAAOrB,EAAWqB,EAAEc,OAAOJ,UAChC,uBACR,wBAAQH,KAAK,SAAb,+BAGJ,uBACA,8BACI3B,EAAKmC,KAAI,SAACC,GAAD,OACT,gCACE,uBAAMC,MAAO,CAACC,WAAY,QAA1B,UAAoCF,EAAExC,KAAtC,QACCwC,EAAEtC,UAFKyC,KAAKC,MAAQC,KAAKC,mB,MCjEvBC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ae237f61.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { HubConnectionBuilder } from '@microsoft/signalr';\r\n\r\nconst Chat = () => {\r\n  // const chatHubEndPoint = \"https://localhost:5001/hubs/chat\";\r\n  const chatHubEndPoint = \"https://aws-chat.azurewebsites.net/hubs/chat\";\r\n  const [ connection, setConnection] = useState(null);\r\n  const [ name, setName ] = useState('');\r\n  const [ message, setMessage ] = useState('');\r\n  const [ chat, setChat ] = useState([]);\r\n  const latestChat = useRef(null);\r\n\r\n  latestChat.current = chat;\r\n\r\n  // componentDidMount\r\n  useEffect(() => {\r\n    const newConnection = new HubConnectionBuilder()\r\n      .withUrl(chatHubEndPoint)\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n    setConnection(newConnection);\r\n  }, []);\r\n  // componentDidUpdate (changes to connection)\r\n  useEffect(() => {\r\n    if (connection) {\r\n      connection.start()\r\n        .then(() => {\r\n          console.log('Connected!');\r\n\r\n          connection.on('ReceiveMessage', m => {\r\n            const updatedChat = [...latestChat.current];\r\n            updatedChat.push(m);\r\n            setChat(updatedChat);\r\n          });\r\n        })\r\n        .catch(e => console.log('Connection failed: ', e));\r\n    }\r\n  }, [connection]);\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const m = {name: name, message: message};\r\n    console.log(m);\r\n    await connection.send('SendMessage', m);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n        <input \r\n            type=\"text\" \r\n            id=\"name\" \r\n            name=\"name\" \r\n            placeholder=\"name\"\r\n            value={name}\r\n            autoComplete=\"off\"\r\n            autoCapitalize=\"off\"\r\n            onChange={ (e) => setName(e.target.value) }>\r\n          </input><br />\r\n          <input \r\n            type=\"text\" \r\n            id=\"message\" \r\n            name=\"message\" \r\n            placeholder=\"message\"\r\n            value={message}\r\n            autoComplete=\"off\"\r\n            autoCapitalize=\"off\"\r\n            onChange={ (e) => setMessage(e.target.value) }>\r\n          </input><br />\r\n          <button type=\"submit\">Send Message</button>\r\n        </div>\r\n      </form>\r\n      <hr />\r\n      <div>\r\n        { chat.map((c) => \r\n          <div key={Date.now() * Math.random()}>\r\n            <span style={{fontWeight: 'bold'}}>{c.name}: </span>\r\n            {c.message}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import Chat from './components/Chat';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chat />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}