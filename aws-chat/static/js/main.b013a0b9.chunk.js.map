{"version":3,"sources":["components/Chat.jsx","App.js","reportWebVitals.js","index.js"],"names":["Chat","useState","connection","setConnection","name","setName","message","setMessage","chat","setChat","latestChat","useRef","nameEl","messageEl","current","useEffect","newConnection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","start","then","console","log","on","m","updatedChat","push","catch","e","handleSubmit","a","preventDefault","disabled","focus","send","Fragment","onSubmit","className","autoFocus","ref","type","id","placeholder","value","autoComplete","autoCapitalize","onChange","target","trim","length","map","c","style","fontWeight","Date","now","Math","random","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQA+FeA,EA5FF,WAEX,IACA,EAAqCC,mBAAS,MAA9C,mBAAQC,EAAR,KAAoBC,EAApB,KACA,EAA0BF,mBAAS,IAAnC,mBAAQG,EAAR,KAAcC,EAAd,KACA,EAAgCJ,mBAAS,IAAzC,mBAAQK,EAAR,KAAiBC,EAAjB,KACA,EAA0BN,mBAAS,IAAnC,mBAAQO,EAAR,KAAcC,EAAd,KACMC,EAAaC,iBAAO,MACpBC,EAASD,iBAAO,MAChBE,EAAYF,iBAAO,MAEzBD,EAAWI,QAAUN,EAGrBO,qBAAU,WACR,IAAMC,GAAgB,IAAIC,KACvBC,QAdmB,gDAenBC,yBACAC,QAEHjB,EAAca,KACb,IAEHD,qBAAU,WACJb,GACFA,EAAWmB,QACRC,MAAK,WACJC,QAAQC,IAAI,cAEZtB,EAAWuB,GAAG,kBAAkB,SAAAC,GAC9B,IAAMC,EAAW,YAAOjB,EAAWI,SACnCa,EAAYC,KAAKF,GACjBjB,EAAQkB,SAGXE,OAAM,SAAAC,GAAC,OAAIP,QAAQC,IAAI,sBAAuBM,QAElD,CAAC5B,IACJ,IAAM6B,EAAY,uCAAG,WAAOD,GAAP,eAAAE,EAAA,6DACnBF,EAAEG,iBACIP,EAAI,CAACtB,KAAMA,EAAME,QAASA,GAChCC,EAAW,IACXK,EAAOE,QAAQoB,UAAW,EAC1BrB,EAAUC,QAAQqB,QALC,SAMbjC,EAAWkC,KAAK,cAAeV,GANlB,2CAAH,sDASlB,OACE,eAAC,IAAMW,SAAP,WACE,uBAAMC,SAAUP,EAAcQ,UAAU,YAAxC,UACA,uBACIC,WAAS,EACTC,IAAK7B,EACL8B,KAAK,OACLC,GAAG,OACHvC,KAAK,OACLwC,YAAY,OACZC,MAAOzC,EACP0C,aAAa,MACbC,eAAe,MACfC,SAAW,SAAClB,GAAD,OAAOzB,EAAQyB,EAAEmB,OAAOJ,UAC7B,uBACR,uBACEJ,IAAK5B,EACLqB,SAAkC,IAAvB9B,EAAK8C,OAAOC,OACvBT,KAAK,OACLC,GAAG,UACHvC,KAAK,UACLwC,YAAY,UACZC,MAAOvC,EACPwC,aAAa,MACbC,eAAe,MACfC,SAAW,SAAClB,GAAD,OAAOvB,EAAWuB,EAAEmB,OAAOJ,UAChC,uBACR,wBACEX,SAAkC,IAAvB9B,EAAK8C,OAAOC,QAA0C,IAA1B7C,EAAQ4C,OAAOC,OACtDT,KAAK,SAFP,6BAMF,qBAAKH,UAAU,gBAAf,SACI/B,EAAK4C,KAAI,SAACC,GAAD,OACT,gCACE,uBAAMC,MAAO,CAACC,WAAY,QAA1B,UAAoCF,EAAEjD,KAAtC,QACCiD,EAAE/C,UAFKkD,KAAKC,MAAQC,KAAKC,mB,MCtEvBC,MARf,WACE,OACE,qBAAKrB,UAAU,MAAf,SACE,cAAC,EAAD,OCESsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzC,MAAK,YAAkD,IAA/C0C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b013a0b9.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { HubConnectionBuilder } from '@microsoft/signalr';\r\n\r\nconst Chat = () => {\r\n  // const chatHubEndPoint = \"https://localhost:5001/hubs/chat\";\r\n  const chatHubEndPoint = \"https://aws-chat.azurewebsites.net/hubs/chat\";\r\n  const [ connection, setConnection] = useState(null);\r\n  const [ name, setName ] = useState('');\r\n  const [ message, setMessage ] = useState('');\r\n  const [ chat, setChat ] = useState([]);\r\n  const latestChat = useRef(null);\r\n  const nameEl = useRef(null);\r\n  const messageEl = useRef(null);\r\n\r\n  latestChat.current = chat;\r\n\r\n  // componentDidMount\r\n  useEffect(() => {\r\n    const newConnection = new HubConnectionBuilder()\r\n      .withUrl(chatHubEndPoint)\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n    setConnection(newConnection);\r\n  }, []);\r\n  // componentDidUpdate (changes to connection)\r\n  useEffect(() => {\r\n    if (connection) {\r\n      connection.start()\r\n        .then(() => {\r\n          console.log('Connected!');\r\n\r\n          connection.on('ReceiveMessage', m => {\r\n            const updatedChat = [...latestChat.current];\r\n            updatedChat.push(m);\r\n            setChat(updatedChat);\r\n          });\r\n        })\r\n        .catch(e => console.log('Connection failed: ', e));\r\n    }\r\n  }, [connection]);\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const m = {name: name, message: message};\r\n    setMessage('');\r\n    nameEl.current.disabled = true;\r\n    messageEl.current.focus();\r\n    await connection.send('SendMessage', m);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <form onSubmit={handleSubmit} className='Chat-form'>\r\n      <input \r\n          autoFocus\r\n          ref={nameEl}\r\n          type=\"text\" \r\n          id=\"name\" \r\n          name=\"name\" \r\n          placeholder=\"name\"\r\n          value={name}\r\n          autoComplete=\"off\"\r\n          autoCapitalize=\"off\"\r\n          onChange={ (e) => setName(e.target.value) }>\r\n        </input><br />\r\n        <input\r\n          ref={messageEl}\r\n          disabled={ name.trim().length === 0 }\r\n          type=\"text\" \r\n          id=\"message\" \r\n          name=\"message\" \r\n          placeholder=\"message\"\r\n          value={message}\r\n          autoComplete=\"off\"\r\n          autoCapitalize=\"off\"\r\n          onChange={ (e) => setMessage(e.target.value) }>\r\n        </input><br />\r\n        <button \r\n          disabled={ name.trim().length === 0 || message.trim().length === 0 } \r\n          type=\"submit\">\r\n            Send Message\r\n        </button>\r\n      </form>\r\n      <div className='Chat-messages'>\r\n        { chat.map((c) => \r\n          <div key={Date.now() * Math.random()}>\r\n            <span style={{fontWeight: 'bold'}}>{c.name}: </span>\r\n            {c.message}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","// Repository:  chat-react\n// Author:      Jeff Grissom\n// Version:     2.xx\n\nimport Chat from './components/Chat';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chat />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}