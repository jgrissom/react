{"version":3,"sources":["Components/ChatForm.jsx","Components/ChatMessage.jsx","App.js","reportWebVitals.js","index.js"],"names":["ChatForm","props","onSend","useState","name","setName","message","setMessage","nameEl","useRef","messageEl","onSubmit","e","preventDefault","current","disabled","focus","className","ref","type","id","onChange","target","value","placeholder","autoFocus","autoComplete","autoCapitalize","trim","length","ChatMessage","chat","App","setChat","connection","setConnection","latestChat","useEffect","newConnection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","start","then","console","log","on","m","updatedChat","push","catch","handleSend","chatMessage","a","send","Fragment","map","c","Date","now","Math","random","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAqDeA,EAnDE,SAACC,GAChB,IAAQC,EAAWD,EAAXC,OACR,EAA0BC,mBAAS,IAAnC,mBAAQC,EAAR,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAQG,EAAR,KAAiBC,EAAjB,KAEMC,EAASC,iBAAO,MAChBC,EAAYD,iBAAO,MAUzB,OACE,uBAAME,SATa,SAACC,GACpBA,EAAEC,iBACFN,EAAW,IACXC,EAAOM,QAAQC,UAAW,EAC1BL,EAAUI,QAAQE,QAClBd,EAAO,CAAEE,OAAME,aAIeW,UAAU,YAAxC,UACE,uBACEC,IAAKV,EACLW,KAAK,OACLC,GAAG,OACHC,SAAW,SAACT,GAAD,OAAOP,EAAQO,EAAEU,OAAOC,QACnCnB,KAAK,OACLmB,MAAOnB,EACPoB,YAAY,OACZC,WAAS,EACTC,aAAa,MACbC,eAAe,QACT,uBACR,uBACET,IAAKR,EACLK,SAAkC,IAAvBX,EAAKwB,OAAOC,OACvBV,KAAK,OACLC,GAAG,UACHC,SAAW,SAACT,GAAD,OAAOL,EAAWK,EAAEU,OAAOC,QACtCnB,KAAK,UACLmB,MAAOjB,EACPkB,YAAY,UACZE,aAAa,MACbC,eAAe,QACT,uBACR,wBACEZ,SAAkC,IAAvBX,EAAKwB,OAAOC,QAA0C,IAA1BvB,EAAQsB,OAAOC,OACtDV,KAAK,SAFP,8BChCSW,EAVK,SAAC7B,GACnB,IAAO8B,EAAQ9B,EAAR8B,KAEP,OACE,sBAAKd,UAAU,eAAf,UACE,iCAAOc,EAAK3B,KAAZ,QADF,IACiC2B,EAAKzB,YCsD3B0B,MApDf,WACE,MAAwB7B,mBAAS,IAAjC,mBAAO4B,EAAP,KAAaE,EAAb,KAGA,EAAqC9B,mBAAS,MAA9C,mBAAQ+B,EAAR,KAAoBC,EAApB,KACMC,EAAa3B,iBAAO,MAC1B2B,EAAWtB,QAAUiB,EAGrBM,qBAAU,WACR,IAAMC,GAAgB,IAAIC,KACvBC,QARmB,gDASnBC,yBACAC,QAEHP,EAAcG,KACb,IAGHD,qBAAU,WACJH,GACFA,EAAWS,QACRC,MAAK,WACJC,QAAQC,IAAI,cAEZZ,EAAWa,GAAG,kBAAkB,SAAAC,GAC9B,IAAMC,EAAW,YAAOb,EAAWtB,SACnCmC,EAAYC,KAAKF,GACjBf,EAAQgB,SAGXE,OAAM,SAAAvC,GAAC,OAAIiC,QAAQC,IAAI,sBAAuBlC,QAElD,CAACsB,IAEJ,IAAMkB,EAAU,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACXN,EAAI,CAAC5C,KAAMiD,EAAYjD,KAAME,QAAS+C,EAAY/C,SADvC,SAEX4B,EAAWqB,KAAK,cAAeP,GAFpB,2CAAH,sDAKhB,OACE,eAAC,IAAMQ,SAAP,WACE,cAAC,EAAD,CAAUtD,OAAQkD,IAClB,qBAAKnC,UAAU,gBAAf,SACIc,EAAK0B,KAAI,SAAAC,GAAC,OACV,cAAC,EAAD,CAA8C3B,KAAM2B,GAAlCC,KAAKC,MAAQC,KAAKC,mBC1C/BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fcfa1745.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react';\r\n\r\nconst ChatForm = (props) => {\r\n  const { onSend } = props;\r\n  const [ name, setName ] = useState('');\r\n  const [ message, setMessage ] = useState('');\r\n\r\n  const nameEl = useRef(null);\r\n  const messageEl = useRef(null);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setMessage('');\r\n    nameEl.current.disabled = true;\r\n    messageEl.current.focus();\r\n    onSend({ name, message });\r\n  }\r\n  \r\n  return (\r\n    <form onSubmit={handleSubmit} className='Chat-form'>\r\n      <input \r\n        ref={nameEl}\r\n        type=\"text\" \r\n        id=\"name\" \r\n        onChange={ (e) => setName(e.target.value) }\r\n        name=\"name\"\r\n        value={name}\r\n        placeholder=\"Name\"\r\n        autoFocus\r\n        autoComplete=\"off\"\r\n        autoCapitalize=\"off\">\r\n      </input><br />\r\n      <input\r\n        ref={messageEl}\r\n        disabled={ name.trim().length === 0 }\r\n        type=\"text\" \r\n        id=\"Message\" \r\n        onChange={ (e) => setMessage(e.target.value) }\r\n        name=\"message\"\r\n        value={message}\r\n        placeholder=\"Message\"\r\n        autoComplete=\"off\"\r\n        autoCapitalize=\"off\">\r\n      </input><br />\r\n      <button \r\n        disabled={ name.trim().length === 0 || message.trim().length === 0 }  \r\n        type=\"submit\">\r\n          Send Message\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ChatForm;\r\n","import React from 'react';\r\n\r\nconst ChatMessage = (props) => {\r\n  const {chat} = props;\r\n\r\n  return (\r\n    <div className=\"Chat-message\">\r\n      <span>{chat.name} &gt;</span> {chat.message}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatMessage;\r\n","// Repository:  chat-react\r\n// Author:      Jeff Grissom\r\n// Version:     1.xx\r\nimport './App.css';\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport { HubConnectionBuilder } from '@microsoft/signalr';\r\nimport ChatForm from './Components/ChatForm';\r\nimport ChatMessage from './Components/ChatMessage';\r\n\r\nfunction App() {\r\n  const [chat, setChat] = useState([]);\r\n  // const chatHubEndPoint = \"https://localhost:5001/hubs/chat\";\r\n  const chatHubEndPoint = \"https://aws-chat.azurewebsites.net/hubs/chat\";\r\n  const [ connection, setConnection] = useState(null);\r\n  const latestChat = useRef(null);\r\n  latestChat.current = chat;\r\n\r\n  // componentDidMount\r\n  useEffect(() => {\r\n    const newConnection = new HubConnectionBuilder()\r\n      .withUrl(chatHubEndPoint)\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n    setConnection(newConnection);\r\n  }, []);\r\n\r\n  // componentDidUpdate (changes to connection)\r\n  useEffect(() => {\r\n    if (connection) {\r\n      connection.start()\r\n        .then(() => {\r\n          console.log('Connected!');\r\n\r\n          connection.on('ReceiveMessage', m => {\r\n            const updatedChat = [...latestChat.current];\r\n            updatedChat.push(m);\r\n            setChat(updatedChat);\r\n          });\r\n        })\r\n        .catch(e => console.log('Connection failed: ', e));\r\n    }\r\n  }, [connection]);\r\n\r\n  const handleSend = async (chatMessage) => {\r\n    const m = {name: chatMessage.name, message: chatMessage.message};\r\n    await connection.send('SendMessage', m);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ChatForm onSend={handleSend} />\r\n      <div className='Chat-messages'>\r\n        { chat.map(c =>\r\n          <ChatMessage key={Date.now() * Math.random()} chat={c} />\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}