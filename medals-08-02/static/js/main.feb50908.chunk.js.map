{"version":3,"sources":["components/Medal.jsx","components/Country.jsx","components/NewCountry.jsx","App.js","reportWebVitals.js","index.js"],"names":["Medal","props","medal","country","onIncrement","onDecrement","className","name","page_value","saved_value","onClick","id","disabled","Country","medals","onDelete","onSave","onReset","sum","forEach","getMedalsTotal","map","unsaved","renderSaveButton","Fragment","style","marginLeft","NewCountry","onAdd","prompt","trim","length","App","apiEndpoint","useState","countries","setCountries","connection","setConnection","useRef","latestCountries","current","useEffect","a","axios","get","fetchedCountries","data","newCountries","newCountry","count","push","fetchCountries","newConnection","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","start","then","console","log","on","mutableCountries","concat","filter","c","updatedCountry","idx","findIndex","catch","e","handleAdd","post","handleDelete","countryId","originalCountries","delete","response","status","alert","handleSave","jsonPatch","op","path","value","JSON","stringify","patch","handleReset","handleIncrement","medalName","handleUpdate","handleDecrement","factor","reduce","b","getAllMedalsTotal","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.feb50908.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Medal = (props) => {\r\n  const { medal, country, onIncrement, onDecrement } = props;\r\n  return (\r\n    <div className=\"medals\">\r\n      { \r\n        ( country[medal.name].page_value !== country[medal.name].saved_value) ?\r\n          <span className=\"delta\">{medal.name} Medals: {country[medal.name].page_value}</span>\r\n        :\r\n          <span>{medal.name} Medals: {country[medal.name].page_value}</span>\r\n      }\r\n      <button onClick={ () => onIncrement(country.id, medal.name) }>+</button>\r\n      <button disabled={ country[medal.name].page_value === 0 } onClick={ () => onDecrement(country.id, medal.name) }>-</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Medal;\r\n","import React from 'react';\r\nimport Medal from './Medal';\r\n\r\nconst Country = (props) => {\r\n  const { country, medals, onIncrement, onDecrement, onDelete, onSave, onReset } = props;\r\n\r\n  const getMedalsTotal = (country, medals) => {\r\n    let sum = 0;\r\n    medals.forEach(medal => { sum += country[medal.name].page_value; });\r\n    return sum;\r\n  }\r\n  // const renderSaveButton = () => {\r\n  //   medals.forEach(medal => {\r\n  //     if (country[medal.name].page_value !== country[medal.name].saved_value) {\r\n  //       return true;\r\n  //     }\r\n  //   });\r\n  //   return false;\r\n  // }\r\n  const renderSaveButton = () => {\r\n    let unsaved = false;\r\n    medals.forEach(medal => {\r\n      if (country[medal.name].page_value !== country[medal.name].saved_value) {\r\n        unsaved = true;\r\n      }\r\n    });\r\n    return unsaved;\r\n  }\r\n  return (\r\n    <div className=\"country\">\r\n      <div className=\"name\">\r\n        { country.name }\r\n        <span className=\"badge\">\r\n          { getMedalsTotal(country, medals) }\r\n        </span>\r\n      </div>\r\n      { medals.map(medal =>\r\n        <Medal \r\n          key={ medal.id } \r\n          country={ country } \r\n          medal={ medal } \r\n          onIncrement={ onIncrement } \r\n          onDecrement={ onDecrement } />\r\n      ) }\r\n      { renderSaveButton() ?\r\n        <React.Fragment>\r\n          <button style={{marginLeft:'8px'}} onClick={ () => onSave(country.id) }>save</button>\r\n          <button style={{marginLeft:'8px'}} onClick={ () => onReset(country.id) }>reset</button>\r\n        </React.Fragment>\r\n        :\r\n        <button onClick={() => onDelete(country.id)}>delete</button>\r\n      }\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Country;\r\n","import React from 'react';\r\n\r\nconst NewCountry = (props) => {\r\n  const { onAdd } = props;\r\n  const handleClick = () => {\r\n    const name = prompt('Enter country name');\r\n    if (name && name.trim().length > 0) {\r\n      onAdd(name);\r\n    }\r\n  }\r\n  return (\r\n    <div className='newCountryButton'>\r\n      <button onClick={ handleClick }>New Country</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewCountry;\r\n","// Repository:  medals-b-react\r\n// Author:      Jeff Grissom\r\n// Version:     8.xx-02\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport { HubConnectionBuilder } from '@microsoft/signalr';\r\nimport Country from './components/Country';\r\nimport NewCountry from './components/NewCountry';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  // const apiEndpoint = \"https://localhost:5001/api/country\";\r\n  // const hubEndpoint = \"https://localhost:5001/medalsHub\"\r\n  const apiEndpoint = \"https://medalsapi.azurewebsites.net/api/country\";\r\n  const hubEndpoint = \"https://medalsapi.azurewebsites.net/medalsHub\"\r\n  const [ countries, setCountries ] = useState([]);\r\n  const [ connection, setConnection] = useState(null);\r\n  const medals = useRef([\r\n    { id: 1, name: 'gold' },\r\n    { id: 2, name: 'silver' },\r\n    { id: 3, name: 'bronze' },\r\n  ]);\r\n  const latestCountries = useRef(null);\r\n  // latestCountries.current is a ref variable to countries\r\n  // this is needed to access state variable in useEffect w/o dependency\r\n  latestCountries.current = countries;\r\n\r\n  // this is the functional equivalent to componentDidMount\r\n  useEffect(() => {\r\n    // initial data loaded here\r\n    async function fetchCountries() {\r\n      const { data : fetchedCountries } = await axios.get(apiEndpoint);\r\n      let newCountries = [];\r\n      fetchedCountries.forEach(country => {\r\n        let newCountry = {\r\n          id: country.id,\r\n          name: country.name,\r\n        };\r\n        medals.current.forEach(medal => {\r\n          const count = country[medal.name];\r\n          newCountry[medal.name] = { page_value: count, saved_value: count };\r\n        });\r\n        newCountries.push(newCountry);\r\n      });\r\n      setCountries(newCountries);\r\n    }\r\n    fetchCountries();\r\n\r\n    // signalR\r\n    const newConnection = new HubConnectionBuilder()\r\n      .withUrl(hubEndpoint)\r\n      .withAutomaticReconnect()\r\n      .build();\r\n\r\n    setConnection(newConnection);\r\n  }, []);\r\n\r\n  // componentDidUpdate (changes to connection)\r\n  useEffect(() => {\r\n    if (connection) {\r\n      connection.start()\r\n      .then(() => {\r\n        console.log('Connected!')\r\n\r\n        connection.on('ReceiveAddMessage', country => {\r\n          console.log(`Add: ${country.name}`);\r\n\r\n          let newCountry = { \r\n            id: country.id, \r\n            name: country.name,\r\n          };\r\n          medals.current.forEach(medal => {\r\n            const count = country[medal.name];\r\n            newCountry[medal.name] = { page_value: count, saved_value: count };\r\n          });\r\n          let mutableCountries = [...latestCountries.current];\r\n          mutableCountries = mutableCountries.concat(newCountry);\r\n          setCountries(mutableCountries);\r\n        });\r\n\r\n        connection.on('ReceiveDeleteMessage', id => {\r\n          console.log(`Delete id: ${id}`);\r\n          let mutableCountries = [...latestCountries.current];\r\n          mutableCountries = mutableCountries.filter(c => c.id !== id);\r\n          setCountries(mutableCountries);\r\n        });\r\n\r\n        connection.on('ReceivePatchMessage', country => {\r\n          console.log(`Patch: ${country.name}`);\r\n          let updatedCountry = {\r\n            id: country.id,\r\n            name: country.name,\r\n          }\r\n          medals.current.forEach(medal => {\r\n            const count = country[medal.name];\r\n            updatedCountry[medal.name] = { page_value: count, saved_value: count };\r\n          });\r\n          let mutableCountries = [...latestCountries.current];\r\n          const idx = mutableCountries.findIndex(c => c.id === country.id);\r\n          mutableCountries[idx] = updatedCountry;\r\n\r\n          setCountries(mutableCountries);\r\n        });\r\n      })\r\n      .catch(e => console.log('Connection failed: ', e));\r\n    }\r\n  // useEffect is dependent on changes connection\r\n  }, [connection]);\r\n\r\n  const handleAdd = async (name) => {\r\n    await axios.post(apiEndpoint, { name: name });\r\n  }\r\n  const handleDelete = async (countryId) => {\r\n    const originalCountries = countries;\r\n    setCountries(countries.filter(c => c.id !== countryId));\r\n    try {\r\n      await axios.delete(`${apiEndpoint}/${countryId}`);\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 404) {\r\n        // country already deleted\r\n        console.log(\"The record does not exist - it may have already been deleted\");\r\n      } else { \r\n        alert('An error occurred while deleting');\r\n        setCountries(originalCountries);\r\n      }\r\n    }\r\n  }\r\n  const handleSave = async (countryId) => {\r\n    const originalCountries = countries;\r\n\r\n    const idx = countries.findIndex(c => c.id === countryId);\r\n    const mutableCountries = [ ...countries ];\r\n    const country = mutableCountries[idx];\r\n    let jsonPatch = [];\r\n    medals.current.forEach(medal => {\r\n      if (country[medal.name].page_value !== country[medal.name].saved_value) {\r\n        jsonPatch.push({ op: \"replace\", path: medal.name, value: country[medal.name].page_value });\r\n        country[medal.name].saved_value = country[medal.name].page_value;\r\n      }\r\n    });\r\n    console.log(`json patch for id: ${countryId}: ${JSON.stringify(jsonPatch)}`);\r\n    // update state\r\n    setCountries(mutableCountries);\r\n\r\n    try {\r\n      await axios.patch(`${apiEndpoint}/${countryId}`, jsonPatch);\r\n    } catch (ex) {\r\n      if (ex.response && ex.response.status === 404) {\r\n        // country already deleted\r\n        console.log(\"The record does not exist - it may have already been deleted\");\r\n      } else { \r\n        alert('An error occurred while updating');\r\n        setCountries(originalCountries);\r\n      }\r\n    }\r\n  }\r\n  const handleReset = (countryId) => {\r\n    const idx = countries.findIndex(c => c.id === countryId);\r\n    const mutableCountries = [ ...countries ];\r\n    const country = mutableCountries[idx];\r\n    medals.current.forEach(medal => {\r\n      country[medal.name].page_value = country[medal.name].saved_value;\r\n    });\r\n    setCountries(mutableCountries);\r\n  }\r\n  const handleIncrement = (countryId, medalName) => handleUpdate(countryId, medalName, 1);\r\n  const handleDecrement = (countryId, medalName) => handleUpdate(countryId, medalName, -1);\r\n  const handleUpdate = (countryId, medalName, factor) => {\r\n    const idx = countries.findIndex(c => c.id === countryId);\r\n    const mutableCountries = [...countries ];\r\n    mutableCountries[idx][medalName].page_value += (1 * factor);\r\n    setCountries(mutableCountries);\r\n  }\r\n  const getAllMedalsTotal = () => {\r\n    let sum = 0;\r\n    medals.current.forEach(medal => { sum += countries.reduce((a, b) => a + b[medal.name].page_value, 0); });\r\n    return sum;\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <div className='appHeading'>\r\n        Olympic Medals\r\n        <span className='badge'>\r\n          { getAllMedalsTotal() }\r\n        </span>\r\n      </div>\r\n      <div className='countries'>\r\n          { countries.map(country => \r\n            <Country \r\n              key={ country.id } \r\n              country={ country } \r\n              medals={ medals.current }\r\n              onDelete={ handleDelete }\r\n              onSave={ handleSave }\r\n              onReset={ handleReset }\r\n              onIncrement={ handleIncrement } \r\n              onDecrement={ handleDecrement } />\r\n          )}\r\n      </div>\r\n      <NewCountry onAdd={ handleAdd } />\r\n    </React.Fragment>\r\n  );\r\n}\r\n \r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}